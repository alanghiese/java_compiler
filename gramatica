%{
package java_compiler;

import utilities.*;

import java.util.LinkedList;
import java.util.List;

import codigo_intermedio.*;
import java.util.concurrent.atomic.AtomicReference;
%}

%token  ASIG IF ENDIF ELSE PRINT WHILE USINTEGER LINTEGER READONLY WRITE PASS ID CTE RETURN STRING MAY_IG MEN_IG DIST
%start prog
%left '+' '-'
%left '*' '/'

%%
prog    :   sent {print("Sintaxis: Codigo reconocido");}
        ;

sent    :   sent decl
        |   sent exec
        |   sent asig
        |   decl
        |   exec
        |   asig
        |   error','    {yyerror(((Token) $2.obj).getLine(), "");}
        ;

decl    :   var
        |   func
        ;

var     :   type lst_var',' {print("Sintaxis: Declaracion de variable");
                            setTypes(((Token)($1.obj)).getLex(),((Token)$1.obj).getLine());}
	    |   lst_var','      {yyerror(((Token) $2.obj).getLine(), "Falta especificar el tipo de la variable");}
	    |   type error','         {yyerror(((Token) $1.obj).getLine(), "Error en la declaracion de variable/s");} 
;

lst_var :   ID';' lst_var           {varList.add(((Token) ($1.obj)).getLex());}
        |   ';' lst_var     {yyerror(((Token) $1.obj).getLine(), "Falta identificador antes del ';'");}
	    |   ID error lst_var      {yyerror(((Token) $1.obj).getLine(), "Falta ';'");}  
	    |   ID                  {varList.add(((Token) ($1.obj)).getLex());}
;
	
func	:   func_head func_body     {if (paramList.size()==1) {
										 print("Sintaxis: Declaracion de funcion");
	                                     if(TypeConverter.isValid(((Token)$1.obj).getLex(),typeRet)){
	                                     	if(!((Token)$1.obj).getLex().equals(typeRet)){
												Triples cnv = new TrCNV(((Triples)$2.obj).getO1());
												cnv.setId(((Triples)$2.obj).getId());
												triples.add(triples.size()-2,cnv);
												((Triples)$2.obj).setId(((Triples)$2.obj).getId()+1);
	                                            ((Triples)$2.obj).setO1(cnv);
	                                        }
	                                            
	                                     }else{
	                                     	yyerror(((Token)$1.obj).getLine(), "Semantic Error: Tipo de retorno incompatible"); 
	                                     }
	                                     //remuevo el parametro para esta funcion en particular (considero funciones anidadas)
	                                     paramList.removeLast();
	                                     LexicalAnalizer.symbolTable.setPermissions(currentScope,permsList.removeLast());
	                                     currentScope=GLOBAL_SCOPE;
	                                  }else{
	                                  	yyerror(((Token) $1.obj).getLine(), "Función declarada dentro de otra función");
	                                  	paramList.removeLast();
	                                  	permsList.removeLast();
	                                  	}
	                                 }
;

func_head :	type ID param	{
							if(!LexicalAnalizer.symbolTable.isUsed(((Token)$2.obj).getLex())){
								LexicalAnalizer.symbolTable.removeID(((Token)$2.obj).getLex());
								FNCInformation fnc = new FNCInformation();
				                fnc.setType(((Token)$1.obj).getLex());
                                fnc.setParamType(((Token)$3.obj).getLex());
                                fnc.setParamName(paramList.getFirst());

                                Triples t= new TrFUN((Token)$2.obj);
                                        triples.add(t);
	                            
	                            LexicalAnalizer.symbolTable.addFNC(((Token)$2.obj).getLex(), fnc);
								LexicalAnalizer.symbolTable.setType(((Token)$2.obj).getLex(),((Token)$1.obj).getLex());
								currentScope=((Token)$2.obj).getLex();
								LexicalAnalizer.symbolTable.setScope(paramList.getLast(),currentScope);
							}
                            else
                            	yyerror(((Token)$1.obj).getLine(), "Semantic Error: El id "+ ((Token)$2.obj).getLex() +" ya fue usado como variable");
                            $$=$1;	

							}
	|   ID param           {yyerror(((Token) $1.obj).getLine(), "Falta el tipo de retorno de la funcion");} 
	|   type param         {yyerror(((Token) $1.obj).getLine(), "No se permiten funciones anonimas");}       
;

param	:   '(' type ID ')'         {   
                                        permsList.addLast(new Permissions(false,false));
                                        paramList.addLast(((Token) $3.obj).getLex());
                                        if(!LexicalAnalizer.symbolTable.isUsed(((Token)$3.obj).getLex())){
                                        	LexicalAnalizer.symbolTable.setType(((Token)$3.obj).getLex(),((Token)$2.obj).getLex());
                                        	
                                        }
                                        else
                                        	yyerror(((Token)$1.obj).getLine(), "Semantic Error: El id "+ ((Token)$3.obj).getLex() +" ya fue usado como variable");   
                                        $$=$2; 
                                     }
        |   type ID ')'             {yyerror(((Token) $1.obj).getLine(), "Falta '('");}
        |   '(' ID ')'              {yyerror(((Token) $1.obj).getLine(), "Falta especificar el tipo del parametro de la funcion");}
        |   '(' type ')'            {yyerror(((Token) $2.obj).getLine(), "Falta ID como parametro de la funcion");}
        |   '(' type ID             {yyerror(((Token) $3.obj).getLine(), "Falta ')'");}
         |   '(' ')'             {yyerror(((Token) $2.obj).getLine(), "Falta el argumento de la funcion");} 
;

func_body   :   '{' sent ret '}' {$$=$3;}
            |   '{' ret '}'			{$$=$2;}
	    |   sent ret '}'                {yyerror(((Token) $3.obj).getLine(), "Falta '{'");}
	    |  '{' sent ret error','        {yyerror(((Token) $1.obj).getLine(), "Falta '}'");}
	    |  '{' sent '}'                 {yyerror(((Token) $3.obj).getLine(), "Falta sentencia de retorno");}
	    |	'{' '}'						{yyerror(((Token) $1.obj).getLine(), "Falta sentencia de retorno");}
	    ;

ret	    :   RETURN '(' expr ')'','  {Triples t = new TrRET((Operand)$3.obj);
                                     triples.add(t);
                                     typeRet = ((Operand)$3.obj).getType();
                                     $$ = new ParserVal(t);}
        |   '(' expr ')'','         {yyerror(((Token) $1.obj).getLine(), "Retorno de funcion sin 'RETURN'");}
        |   RETURN expr ')'','      {yyerror(((Token) $1.obj).getLine(), "Falta '('");}
        |   RETURN '(' ')'','       {yyerror(((Token) $2.obj).getLine(), "Falta valor de retorno de la funcion");}
        |   RETURN '(' expr','      {yyerror(((Token) $2.obj).getLine(), "Falta ')'");}
        |   RETURN '(' expr ')'     {yyerror(((Token) $4.obj).getLine(), "Falta ','");}
	    ;

exec    :   s_cond
        |   ctrl
        |   prt
        |   inv_fun','
        ;

s_cond  :   IF '(' cond ')' ctrl_blck ELSE ctrl_blck ENDIF','   {
                                                                print("Sintaxis: Sentencia IF-ELSE");
                                                                pendingTriples.removeLast();
                                                                triples.remove(triples.size()-2);
                                                                triples.getLast().decreaseId();
                                                            	} 
        |   IF '(' cond ')' ctrl_blck ENDIF','                  {

                                                                print("Sintaxis: Sentencia IF");
                                                                pendingTriples.removeLast();
                                                                triples.getLast().decreaseId();
                                                                triples.remove(triples.size()-2);}
        |   '(' cond ')' ctrl_blck ELSE ctrl_blck ENDIF','      {yyerror(((Token) $1.obj).getLine(), "'ELSE' sin 'IF'");}
        |   '(' cond ')' ctrl_blck ENDIF','                     {yyerror(((Token) $1.obj).getLine(), "'ENDIF' sin 'IF'");}
        |   IF cond ')' ctrl_blck ELSE ctrl_blck ENDIF','       {yyerror(((Token) $1.obj).getLine(), "Falta '(' en condicion de sentencia condicional");}
        |   IF '(' ')' ctrl_blck ELSE ctrl_blck ENDIF','        {yyerror(((Token) $2.obj).getLine(), "condicion faltante en sentencia condicional");}
        |   IF '(' cond error ctrl_blck ELSE ctrl_blck ENDIF','       {yyerror(((Token) $2.obj).getLine(), "Falta ')' en la sentencia condicional");}
        |   IF '(' cond ')' ELSE ctrl_blck ENDIF','             {yyerror(((Token) $4.obj).getLine(), "Sentencia/s faltante/s luego de 'IF'");}
        |   IF '(' cond ')' ctrl_blck ctrl_blck ENDIF','        {yyerror(((Token) $4.obj).getLine(), "Falta 'ELSE' o sobran llaves en la declaracion de bloque");}
        |   IF '(' cond ')' ctrl_blck ELSE ENDIF','             {yyerror(((Token) $3.obj).getLine(), "Bloque faltante luego de 'ELSE'");}
        |   IF '(' cond ')' ctrl_blck ELSE ctrl_blck error','         {yyerror(((Token) $3.obj).getLine(), "Falta 'ENDIF'");}
        |   IF '(' cond ')' ctrl_blck ELSE ctrl_blck ENDIF      {yyerror(((Token) $3.obj).getLine(), "Falta ','");}
        |   IF '(' cond ')' ctrl_blck ENDIF                     {yyerror(((Token) $3.obj).getLine(), "Falta ','");}
        |   IF cond ')' ctrl_blck ENDIF                         {yyerror(((Token) $2.obj).getLine(), "Falta '('");}
        |   IF '(' ')' ctrl_blck ENDIF                          {yyerror(((Token) $2.obj).getLine(), "Falta condicion en la sentencia condicional");}
        |   IF '(' cond error ctrl_blck ENDIF                         {yyerror(((Token) $2.obj).getLine(), "Falta ')'");}
        |   IF '(' cond ')' ctrl_blck error','                          {yyerror(((Token) $3.obj).getLine(), "Falta 'ENDIF' en sentencia condicional");}
        |   IF '(' cond ')' ENDIF                               {yyerror(((Token) $4.obj).getLine(), "Falta bloque de sentencias en sentencia condicional");}
        ;

ctrl    :   while '(' cond ')' ctrl_blck             {print("Sintaxis: Sentencia While");
                                                     completeLast();}
        |   /*error '(' cond ')' ctrl_blck             {yyerror(((Token) $2.obj).getLine(), "'SENTENCIA DE CONTROL' desconocida");}
        | */  while cond ')' ctrl_blck                     {yyerror(((Token) $1.obj).getLine(), "Falta'('");}
        |   while '(' cond error ctrl_blck           {yyerror(((Token) $2.obj).getLine(), "Falta ')'");}
        |   while '(' cond ')' error','              {yyerror(((Token) $4.obj).getLine(), "Sentencia de control sin bloque de sentencias");}
        ;

while   :   WHILE   {Triples label=new Label();
                    triples.add(label);
                    pendingTriples.add(label);}
                    ;
        
prt     :   PRINT'(' STRING ')'','  {
                                    print("Sintaxis: Sentencia print");
                                    Triples aux = new TrPRT((Operand)$3.obj);
                                    triples.add(aux);}
        |   '(' STRING ')'','       {yyerror(((Token) $1.obj).getLine(), "'PRINT' faltante en la sentencia de impresion");}
        |   PRINT STRING ')'','     {yyerror(((Token) $2.obj).getLine(), "Falta '('");}
        |   PRINT '('STRING','      {yyerror(((Token) $3.obj).getLine(), "Falta ')'");}
        |   PRINT'(' ')'','         {print("Sintaxis: Sentencia print");
                                    Triples aux= new TrPRT();
                                    triples.add(aux);
                                    }
        |   PRINT'(' STRING')'      {yyerror(((Token) $4.obj).getLine(), "Falta ','");}
        ;

cond    :   expr comp expr	{   if (TypeConverter.isValidBidirectional(((Operand)$1.obj).getType(),((Operand)$3.obj).getType())){
									
		                            Triples aux=null;
		                            AtomicReference<Operand> o1=new AtomicReference<>();
		                            AtomicReference<Operand> o2=new AtomicReference<>();

		                            getConversion((Operand)$1.obj,(Operand)$3.obj,o1,o2);

	                                String comparator = ((Token)val_peek(1).obj).getLex();
		                            if (comparator.equals("<"))
		                            	aux = new TrLT(o1.get(),o2.get());
		                            else if(comparator.equals(">"))
		                            	aux = new TrGT(o1.get(),o2.get());
		                            else if(comparator.equals("<="))
		                            	aux = new TrLE(o1.get(),o2.get());
		                            else if(comparator.equals(">="))
		                            	aux = new TrGE(o1.get(),o2.get());
		                            else if(comparator.equals("="))
		                            	aux = new TrEQ(o1.get(),o2.get());
		                            else if(comparator.equals("!="))
		                            	aux = new TrNE(o1.get(),o2.get());
	                                triples.add(aux);
	                                Triples t = new TrBF(null, aux);
	                                triples.add(t);
	                                pendingTriples.add(triples.getLast());
								}

                                else{
                                    Triples t = new TrBF(null, null);
                                    triples.add(t);
                                    pendingTriples.add(triples.getLast());
                                	yyerror(((Token)$2.obj).getLine(),"Semantic Error: Tipos incompatibles en comparacion");
                                }
                            }
        |   comp expr       {yyerror(((Token) $1.obj).getLine(), "Falta expresion del lado izquierdo del comparador");}
        |   expr comp       {yyerror(((Token) $2.obj).getLine(), "Falta expresion del lado derecho del comparador");}
        ;
  
ctrl_blck   :   exec                {blockFound();}
            |   asig                {blockFound();}
            |   '{' ctrl_sent '}'   {blockFound();}
            ;
        
ctrl_sent   :   exec sent
            |   asig sent
            |   exec
            |   asig
            ;

inv_fun :   ID '(' func_var ')'	{	Boolean converted = false;
									if(correctCall(converted, (Operand)$3.obj,((Token)$1.obj).getLex(),((Token)$3.obj).getLex(),(((Token)$1.obj).getLine()) )){
                                    print("Sintaxis: Invocacion a funcion");
                                    Operand param;
                                    if (converted.booleanValue())
                                    	param=triples.getLast();
                                    else
                                    	param=(Operand)$3.obj;
                                    Triples t= new TrINV((Token)$1.obj,param); 
                                    triples.add(t);
                                    if (!paramList.isEmpty()){
                                         if ( ((FNCInformation)LexicalAnalizer.symbolTable.getLexeme(((Token) $1.obj).getLex())).writes() )
                                             permsList.getLast().setWrite(true);
                                          if (((Operand) $3.obj).getLex().equals(paramList.getFirst()))
                                             permsList.getLast().setPass(true);                                   
                                     }   
                                  $$=new ParserVal(t);                                   
                                 }
                                }
        |   ID '(' func_var ','    {yyerror(((Token) $2.obj).getLine(), "Falta ')'");}
        ;
        

func_var    :   ID ';' lst_perm {$$=$1;}
            |   error','   {yyerror(((Token) $2.obj).getLine(), "Argumentos mal definidos");}
            |   error';' lst_perm        {yyerror(((Token) $2.obj).getLine(), "Llamado a funcion sin argumento");}
            |   ID lst_perm         {yyerror(((Token) $1.obj).getLine(), "Falta ';'");}
            |   ID ';'              {yyerror(((Token) $2.obj).getLine(), "Especificacion de permisos faltante");}
            ;


 asig    :   ID ASIG expr','        {
 									if (LexicalAnalizer.symbolTable.isVar(((Token) $1.obj).getLex(),currentScope)){
	                                    if(TypeConverter.isValid(((Token) $1.obj).getType(),((Operand) $3.obj).getType())){
	 										Triples aux;
											if (!((Token) $1.obj).getType().equals(((Operand) $3.obj).getType()  )){
	                                            	Triples cnv = new TrCNV((Operand)$3.obj);
	                                                triples.add(cnv);
	                                                aux = new TrASG((Operand)$1.obj,cnv);
	                                            }
	                                         else {  
			                                    aux = new TrASG((Operand)$1.obj,(Operand)$3.obj);
			                                    }
			                             triples.add(aux);
	                                     if (!paramList.isEmpty())
	                                         if (((Token) $1.obj).getLex().equals(paramList.getFirst()))
	                                             permsList.getLast().setWrite(true);
	                                     print("Sintaxis: Asignacion");
	                                     }
	                                    else
	                                       yyerror(((Token) $1.obj).getLine(),"Semantic Error: Tipo invalido en la asignacion :(");
                                      }
                                    else{
                                    	yyerror(((Token) $1.obj).getLine(),"Semantic Error: variable no definida ");
                               
                                    }
                                    	
                                    	}
        |   ASIG expr','        {yyerror(((Token) $3.obj).getLine(), "Asignacion sin id del lado izq");}
        |   ID expr','          {yyerror(((Token) $1.obj).getLine(), "Asignacion sin :=");}
        |   ID ASIG','          {yyerror(((Token) $3.obj).getLine(), "Falta expresion del lado derecho del :=");}
        |   ID ASIG expr        {yyerror(((Token) $1.obj).getLine(), "Falta ','");}
        ;


expr    :   expr '+' expr 	{if (TypeConverter.isValidBidirectional(((Operand)$1.obj).getType(),((Operand)$3.obj).getType())){
	                        AtomicReference<Operand> o1=new AtomicReference<>();
	                        AtomicReference<Operand> o2=new AtomicReference<>();

	                        getConversion((Operand)$1.obj,(Operand)$3.obj,o1,o2);
	                            
							Triples aux = new TrADD(o1.get(),o2.get());
                            triples.add(aux);
                            $$ = new ParserVal(aux);

							}else{
								yyerror(((Token)$2.obj).getLine(),"Semantic Error: Tipos incompatibles en suma");
							}
                        }
        |   expr '-' expr   {if (TypeConverter.isValidBidirectional(((Operand)$1.obj).getType(),((Operand)$3.obj).getType())){
	                        AtomicReference<Operand> o1=new AtomicReference<>();
	                        AtomicReference<Operand> o2=new AtomicReference<>();

	                        getConversion((Operand)$1.obj,(Operand)$3.obj,o1,o2);
	                            
							Triples aux = new TrSUB(o1.get(),o2.get());
                            triples.add(aux);
                            $$ = new ParserVal(aux);

							}else{
								yyerror(((Token)$2.obj).getLine(),"Semantic Error: Tipos incompatibles en resta");
							}
							}
        |   term
        ;

term    :   term '*' fact   {if (TypeConverter.isValidBidirectional(((Operand)$1.obj).getType(),((Operand)$3.obj).getType())){
	                        AtomicReference<Operand> o1=new AtomicReference<>();
	                        AtomicReference<Operand> o2=new AtomicReference<>();

	                        getConversion((Operand)$1.obj,(Operand)$3.obj,o1,o2);
	                            
							Triples aux = new TrMUL(o1.get(),o2.get());
                            triples.add(aux);
                            $$ = new ParserVal(aux);

							}else{
								yyerror(((Token)$2.obj).getLine(),"Semantic Error: Tipos incompatibles en multiplicacion");
							}
							}
        |   term '/' fact   {if (TypeConverter.isValidBidirectional(((Operand)$1.obj).getType(),((Operand)$3.obj).getType()))	{
	                        AtomicReference<Operand> o1=new AtomicReference<>();
	                        AtomicReference<Operand> o2=new AtomicReference<>();

	                        getConversion((Operand)$1.obj,(Operand)$3.obj,o1,o2);
	                            
							Triples aux = new TrDIV(o1.get(),o2.get());
                            triples.add(aux);
                            $$ = new ParserVal(aux);

							}else{
								yyerror(((Token)$2.obj).getLine(),"Semantic Error: Tipos incompatibles en division");
							}}
        |   fact
        ;

lst_perm :  READONLY    {functionAllows=Constants.FUNC_ALLOW_READ;}
         |  WRITE       {functionAllows=Constants.FUNC_ALLOW_WRITE;}   
         |  PASS        {functionAllows=Constants.FUNC_ALLOW_PASS;}
         |  WRITE ';' PASS  {functionAllows=Constants.FUNC_ALLOW_WRITEPASS;}
         |  WRITE ';' error','
         ;

type    :   USINTEGER
        |   LINTEGER
        ;

fact    :   ID {	if (!LexicalAnalizer.symbolTable.isVar(((Token)$1.obj).getLex(), currentScope))
						yyerror(((Token)$1.obj).getLine(),"Semantic Error: La variable (" + ((Token)$1.obj).getLex() + ") no existe");
				
					$$=$1;}
        |   CTE {//numero es positivo
				Object obj = $1.obj;
				if (!ifUS(((Token) obj)))
					testPos((Token) obj);}
        |   '-'CTE  {
                      Object obj = $2.obj;
				if (ifUS(((Token) obj))){
					yyerror("Constante Unsigned negativa");
                    if (((CTNInformation)LexicalAnalizer.symbolTable.getLexeme(((Token)obj).getLex())).getCounter()>1) 
						((CTNInformation)LexicalAnalizer.symbolTable.getLexeme(((Token)obj).getLex())).decreaseCounter();
					else
						LexicalAnalizer.symbolTable.removeCTN(((Token)obj).getLex());
                    }
				else
					testNeg(((Token) obj));
                $$=new ParserVal(obj);}
        |   inv_fun
        ;  


        
comp    :   '='
        |   '<'
        |   '>'
        |   'MEN_IG'
        |   'MAY_IG'
        |   'DIST'
        ;
        
%%

public final static String GLOBAL_SCOPE="Global";

LexicalAnalizer la;
LinkedList<Triples> triples= new LinkedList<>();
LinkedList<Triples> pendingTriples= new LinkedList<>();
LinkedList<String> varList = new LinkedList<>();
int functionAllows=-1;
LinkedList<String> paramList = new LinkedList<>();
LinkedList<Permissions> permsList = new LinkedList<>();
String typeRet = new String();
String currentScope=GLOBAL_SCOPE;
boolean macrigato=false;

public Parser(String path) {
		la = new LexicalAnalizer(path);
}

public void yyerror(int l, String s){
	macrigato=true;
    System.out.println("Sintax Error: Line " + l + " - " + s);

}


public boolean ifUS(Token t) {
		//System.out.println(t.getLex());
		if (((CTNInformation) LexicalAnalizer.symbolTable.getLexeme(t.getLex())).getType().equals(Constants.US_INT))
			return true;
		return false;
	}

public void yyerror(String s){

    System.out.println(s);

}

public void print(String s){
    System.out.println(s);
}

public boolean correctCall(Boolean converted, Operand param, String functionName, String paramName, int line){
    if(LexicalAnalizer.symbolTable.isFunction(functionName)){
    	if (LexicalAnalizer.symbolTable.paramAllow(functionName,functionAllows)){
    		if(!LexicalAnalizer.symbolTable.isVar(paramName,currentScope)){
    			yyerror(line, "Semantic Error: Parameto inexistente");
    			return false;
    		}
    		if(!LexicalAnalizer.symbolTable.getType(paramName).equals(LexicalAnalizer.symbolTable.getParamType(functionName)))
	    		if(!TypeConverter.isValid(LexicalAnalizer.symbolTable.getType(paramName),LexicalAnalizer.symbolTable.getParamType(functionName) )){
	    			yyerror(line, "Semantic Error: Tipo del parametro incompatible");
	    			return false;
	    		}
	    		else{
	    			converted = true;
	    			Triples cnv = new TrCNV(param);
	    			triples.add(cnv);
	    			return true;
	    		}
	    	else
	    		return true;

    	}
    	else yyerror(line, "Semantic Error: Pasaje de parametro invalido");
        
    }
    else yyerror(line, "Semantic Error: Funcion no declarada");
    return false;
}

public void testPos(Token t) {
		String number = t.getLex();
		StringBuilder withoutSuffix = new StringBuilder();
		for (int i = 0; i < number.length() - 2; i++)
			withoutSuffix.append(number.charAt(i));
		Long l = Long.parseLong(withoutSuffix.toString())*-1;
		if (l.compareTo((long)Integer.MAX_VALUE)>0) {
			l = (long)Integer.MAX_VALUE;
			if (((CTNInformation)LexicalAnalizer.symbolTable.getLexeme(t.getLex())).getCounter()>1) {
				((CTNInformation)LexicalAnalizer.symbolTable.getLexeme(t.getLex())).decreaseCounter();
				CTNInformation ctni = new CTNInformation();
				ctni.setType(Constants.L_INT);
				LexicalAnalizer.symbolTable.addCTN(l.toString()+"_l", ctni);
			}
			else {
				LexicalAnalizer.symbolTable.removeCTN(t.getLex());
				CTNInformation ctni = new CTNInformation();
				ctni.setType(Constants.L_INT);
				LexicalAnalizer.symbolTable.addCTN(l.toString()+"_l", ctni);
			}
		}
			
	}
	
	public void testNeg(Token t) {
		String number = t.getLex();
		StringBuilder withoutSuffix = new StringBuilder();
		for (int i = 0; i < number.length() - 2; i++)
			withoutSuffix.append(number.charAt(i));
		Long l = Long.parseLong(withoutSuffix.toString())*-1;
		CTNInformation ctni = new CTNInformation();
		ctni.setType(Constants.L_INT);
		if (((CTNInformation)LexicalAnalizer.symbolTable.getLexeme(t.getLex())).getCounter()>1)
			((CTNInformation)LexicalAnalizer.symbolTable.getLexeme(t.getLex())).decreaseCounter();
		else
			LexicalAnalizer.symbolTable.removeCTN(t.getLex());
        t.setLex(l.toString());
		LexicalAnalizer.symbolTable.addCTN(l.toString()+"_l", ctni);
		
	}

        public void blockFound(){
            Triples t = new TrBI();
            triples.add(t);
            Triples label= new Label();
            triples.add(label);
            pendingTriples.removeLast().setO1(label);
            pendingTriples.add(triples.get(triples.size()-2));
        }

        public void completeLast(){
            Triples t = pendingTriples.removeLast();
            t.setO1(pendingTriples.removeLast());
        }

        public void setTypes(String type, int lineNumber){
            for(String var: varList)
                if(!LexicalAnalizer.symbolTable.isUsed(var)){
                    LexicalAnalizer.symbolTable.setType(var, type);
                    LexicalAnalizer.symbolTable.setScope(var,currentScope);
                }else{
                    yyerror(lineNumber, "El id "+ var +" ya fue usado");
                }
            varList.clear();
        }

        public void getConversion(Operand in1, Operand in2, AtomicReference<Operand> out1, AtomicReference<Operand> out2) {

		if (!in1.getType().equals(in2.getType())) {
			Triples cnv;
			if ((in1.getType().equals("usinteger"))) {
				cnv = new TrCNV(in1);
				triples.add(cnv);
				out1.set(cnv);
				out2.set(in2);
			} else {
				cnv = new TrCNV(in2);
				triples.add(cnv);
				out1.set(in1);
				out2.set(cnv);
			}
		} else {
			out1.set(in1);
			out2.set(in2);
		}
	}

public void gt() {
		String path = "/home/alan/Documents";
		LexicalAnalizer.symbolTable.genOutput(path);
	}

public void getTable(String path) {
		LexicalAnalizer.symbolTable.genOutput(path);
	}
	
	
	public List<Triples> getTriples(){
	return this.triples;
}

